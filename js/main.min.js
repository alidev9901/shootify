"use strict"

const headerBurger = document.getElementById('header-burger');
const headerNav = document.getElementById('header-nav');
const hasSubMenuItems = document.querySelectorAll('.header__nav-item--has-children > a');
const faqItems = document.querySelectorAll('.faq__item');
const modalClose = document.querySelectorAll('.modal__close, .modal .close');
const productVideo = document.querySelectorAll('.product__image-video');
const photoZoom = document.querySelectorAll('.action-zoom');
const image360 = document.querySelectorAll('.images-360');
const solutionVideo = document.querySelectorAll('.solution-card--video');
const beforeAfter = document.querySelectorAll('.before-after__slider');

if( modalClose ) {

  modalClose.forEach(function(button) {
    button.addEventListener('click', function(e) {

      this.closest('.modal--active').classList.remove('modal--active');


    });
  });

}

if( beforeAfter ) {

  beforeAfter.forEach(function( slider ) {
    const container = slider.closest('.before-after');
    slider.addEventListener('input', function(e) {
      container.style.setProperty('--position', `${e.target.value}%`)
    });
  });

}

if( solutionVideo ) {

  solutionVideo.forEach(function(elem) {

    const video = elem.querySelector('video');

    elem.addEventListener('mouseover', function() {
      video.play();
      elem.classList.add('solution-card--video-playing')
    });

    elem.addEventListener('touchstart', function() {
      video.play();
      elem.classList.add('solution-card--video-playing')
    });

    elem.addEventListener('mouseout', function() {
      video.pause();
      elem.classList.remove('solution-card--video-playing')
    });

    elem.addEventListener('touchend', function() {
      video.pause();
      elem.classList.remove('solution-card--video-playing')
    });




  });

}

if( image360 ) {


  image360.forEach(function(element) {
     
    let images = element.querySelectorAll('img');

    let threshold = 5;
    let total = images.length - 1;
    let frame = 0;

    const impetus = new Impetus({
      source: element,
      update(x) {
          // console.log(x)
          images[frame].classList.remove('active');
          frame = Math.floor(-x / threshold) % total;
          frame = frame <= 0 ? total + frame : frame;
          images[frame].classList.add('active');
      }
    });
    images[frame].classList.add('active');

  });

}

if( photoZoom ) {

  photoZoom.forEach(function(elem) {
    elem.addEventListener('mouseover', function(e) {
      console.log(1);
      const img = this.querySelector('img');
      img.style.transform = "scale("+this.dataset.scale+")";
    });
    elem.addEventListener('mouseout', function(e) {
      const img = this.querySelector('img');
      img.style.transform = "scale(1)";
    });
    // mousemove click
    elem.addEventListener('mousemove', function(e) {

      const img = this.querySelector('img');
        let rect = this.getBoundingClientRect()
        let win = this.ownerDocument.defaultView;
        let top = rect.top + win.pageYOffset;
        
        img.style.transformOrigin = ((e.pageX - rect.left) / rect.width) * 100 +
        "% " +
        ((e.pageY - top) / rect.height) * 100 +
        "%";
     

      

    });
  });

}

if( productVideo ) {

  productVideo.forEach((videoContainer) => {
    
    videoContainer.addEventListener('click', function(e) {
      
        videoContainer.classList.add('playing');
        const video = this.querySelector('video');
        video.play();
        

    });

  })

}

if( faqItems ) {

  faqItems.forEach(function(item) {
    item.addEventListener('click', function(e) {

      e.preventDefault();

      const parent = this.closest('.faq');
      const otherItems = parent.querySelectorAll('.faq__item--active');

      
      this.classList.toggle('faq__item--active');
      this.querySelector('.faq__item-content').slideToggle(300);

      if( otherItems ) {
        otherItems.forEach(function(elem) {
          elem.querySelector('.faq__item-content').slideToggle(300);
          elem.classList.remove('faq__item--active');
        });
      }


    });
  });

}

if( headerBurger ) {

  headerBurger.addEventListener('click', function() {

    headerNav.classList.toggle('header__nav--active');
    this.classList.toggle('header__burger--active');
    document.body.classList.toggle('overflow-hidden')

  });

}

if( hasSubMenuItems ) {

  hasSubMenuItems.forEach(function(item) {
    item.addEventListener('click', function(e) {
      
      e.preventDefault();
      
      if( hasSubMenuItems.length > 1  ) {
        hasSubMenuItems.forEach(function(menuItem) {
          if( menuItem != e.target ) {
            menuItem.closest('.header__nav-item--has-children').classList.remove('header__nav-item--active');
          }
        });
      }

      this.closest('.header__nav-item--has-children').classList.toggle('header__nav-item--active');

    });
  });

}


const breakpoint = window.matchMedia( '(min-width: 768px)' );

let howSlider;
let featuresSlider;

const breakpointChecker = function() {


   if ( breakpoint.matches === true ) {

      if ( howSlider !== undefined ) howSlider.destroy( true, true );
      if ( featuresSlider !== undefined ) featuresSlider.destroy( true, true );
      
      return;
   
   } else if ( breakpoint.matches === false ) {
    
      return enableSwiper();
   }
};

const enableSwiper = function() {

   howSlider = new Swiper ('.how__slider', {
      slidesPerView: 'auto',
      keyboardControl: true,
      grabCursor: true,
   });

   featuresSlider = new Swiper ('.features__slider', {
    slidesPerView: 1,
    keyboardControl: true,
    grabCursor: true,
    spaceBetween: 15,
    pagination: {
      el: '.features__slider-pagination',
      clickable: true,
    },
  });
};

breakpoint.addListener(breakpointChecker);

breakpointChecker();


const portfolioSlider = new Swiper('.portfolio__slider', {
  slidesPerView: 'auto',
  autoplay: {
    delay: 1,
    disableOnInteraction: true
  },
  freeMode: true,
  speed: 5000,
  freeModeMomentum: false,
  spaceBetween: 15,
  navigation: {
    prevEl: '.portfolio__slider-button--prev',
    nextEl: '.portfolio__slider-button--next'
  },
  pagination: {
    el: '.portfolio__slider-pagination',
    clickable: true,
  },
  breakpoints: {
    0: {
      slidesPerView: 'auto',
      centeredSlides: true,
    },
    992: {
      slidesPerView: 'auto',
    }
  }
})


const brandsSlider = new Swiper('.brands__slider', {
  slidesPerView: 3,
  spaceBetween: 80,
  loop: true,
  autoplay: {
    delay: 1,
    disableOnInteraction: true
  },
  freeMode: true,
  speed: 5000,
  freeModeMomentum: false,
  breakpoints: {
    0: {
      slidesPerView: 'auto',
    },
    992: {
      slidesPerView: 5,
    }
  }
})


const testimonialsSlider = new Swiper('.testimonials__slider', {
  spaceBetween: 40,
  navigation: {
    prevEl: '.testimonials__slider-button--prev',
    nextEl: '.testimonials__slider-button--next'
  },
  pagination: {
    el: '.testimonials__slider-pagination',
    clickable: true,
  },
  breakpoints: {
    0: {
      slidesPerView: 1,
    },
    768: {
      slidesPerView: 'auto',
      spaceBetween: 40,
    },
    992: {
      slidesPerView: 3,
      spaceBetween: 100,
    }
  }
})


const cases = new Swiper('.cases__slider:not(.cases__slider--single)', {
  slidesPerView: 2,
  spaceBetween: 30,
  loop: true,
  navigation: {
    prevEl: '.cases__slider-button--prev',
    nextEl: '.cases__slider-button--next'
  },
  pagination: {
    el: '.cases__slider-pagination',
    clickable: true,
  },
  breakpoints: {
    0: {
      slidesPerView: 1,
    },
    768: {
      spaceBetween: 2,
      spaceBetween: 30,
    },
  }
})


const casesSingle = new Swiper('.cases__slider--single', {
  slidesPerView: 1,
  spaceBetween: 15,
  loop: true,
  navigation: {
    prevEl: '.cases__slider-button--prev',
    nextEl: '.cases__slider-button--next'
  },
  pagination: {
    el: '.cases__slider-pagination',
    clickable: true,
  },
})

const casesManosry = new Swiper('.cases__manosry-slider', {
  slidesPerView: 3,
  spaceBetween: 30,
  navigation: {
    prevEl: '.cases__slider-button--prev',
    nextEl: '.cases__slider-button--next'
  },
  pagination: {
    el: '.cases__slider-pagination',
    clickable: true,
  },
  breakpoints: {
    0: {
      slidesPerView: 3,
      spaceBetween: 10,
    },
    768: {
      spaceBetween: 3,
      spaceBetween: 30,
    },
  }
})

const whySlider = new Swiper('.why__slider', {
  slidesPerView: 1,
  spaceBetween: 15,
  loop: true,
  pagination: {
    el: '.why__slider-pagination',
    clickable: true,
  },
})



// Slide Toggle Vanilla JS
HTMLElement.prototype.slideToggle = function(duration, callback) {
  if (this.clientHeight === 0) {
    _s(this, duration, callback, true);
  } else {
    _s(this, duration, callback);
  }
};

function _s(el, duration, callback, isDown) {
  
  if (typeof duration === 'undefined') duration = 400;
  if (typeof isDown === 'undefined') isDown = false;

  el.style.overflow = "hidden";
  if (isDown) el.style.display = "block";

  var elStyles        = window.getComputedStyle(el);

  var elHeight        = parseFloat(elStyles.getPropertyValue('height'));
  var elPaddingTop    = parseFloat(elStyles.getPropertyValue('padding-top'));
  var elPaddingBottom = parseFloat(elStyles.getPropertyValue('padding-bottom'));
  var elMarginTop     = parseFloat(elStyles.getPropertyValue('margin-top'));
  var elMarginBottom  = parseFloat(elStyles.getPropertyValue('margin-bottom'));

  var stepHeight        = elHeight        / duration;
  var stepPaddingTop    = elPaddingTop    / duration;
  var stepPaddingBottom = elPaddingBottom / duration;
  var stepMarginTop     = elMarginTop     / duration;
  var stepMarginBottom  = elMarginBottom  / duration;

  var start;

  function step(timestamp) {

    if (start === undefined) start = timestamp;

    var elapsed = timestamp - start;

    if (isDown) {
      el.style.height        = (stepHeight        * elapsed) + "px";
      el.style.paddingTop    = (stepPaddingTop    * elapsed) + "px";
      el.style.paddingBottom = (stepPaddingBottom * elapsed) + "px";
      el.style.marginTop     = (stepMarginTop     * elapsed) + "px";
      el.style.marginBottom  = (stepMarginBottom  * elapsed) + "px";
    } else {
      el.style.height        = elHeight        - (stepHeight        * elapsed) + "px";
      el.style.paddingTop    = elPaddingTop    - (stepPaddingTop    * elapsed) + "px";
      el.style.paddingBottom = elPaddingBottom - (stepPaddingBottom * elapsed) + "px";
      el.style.marginTop     = elMarginTop     - (stepMarginTop     * elapsed) + "px";
      el.style.marginBottom  = elMarginBottom  - (stepMarginBottom  * elapsed) + "px";
    }

    if (elapsed >= duration) {
      el.style.height        = "";
      el.style.paddingTop    = "";
      el.style.paddingBottom = "";
      el.style.marginTop     = "";
      el.style.marginBottom  = "";
      el.style.overflow      = "";
      if (!isDown) el.style.display = "none";
      if (typeof callback === 'function') callback();
    } else {
      window.requestAnimationFrame(step);
    }
  }

  window.requestAnimationFrame(step);
}

